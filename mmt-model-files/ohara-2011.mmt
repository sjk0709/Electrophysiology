[[model]]
name: ohara-2011
display_name: O'Hara et al., 2011
version: 20211112
mmt_authors: Michael Clerx
desc: """
    The O'Hara-Rudy dynamic (ORd) model for the undiseased human ventricular
    action potential and calcium transient.

    This implementation is based on the original Matlab code provided by the
    authors. It was verified against the original code by comparing the
    calculated derivatives.

    References:

    [1] O'Hara et al. (2011) Simulation of the Undiseased Human Cardiac
    Ventricular Action Potential: Model Formulation and Experimental
    Validation. PLoS Computational Biology
    doi: 10.1371/journal.pcbi.1002061

    Original copyright notice:
    ---------------------------------------------------------------------------
    MATLAB Implementation of the O'Hara-Rudy dynamic (ORd) model for the
    undiseased human ventricular action potential and calcium transient

    The ORd model is described in the article "Simulation of the Undiseased
    Human Cardiac Ventricular Action Potential: Model Formulation and
    Experimental Validation"
    by Thomas O'Hara, Laszlo Virag, Andras Varro, and Yoram Rudy

    The article and supplemental materails are freely available in the
    Open Access jounal PLoS Computational Biology
    Link to Article:
    http://www.ploscompbiol.org/article/info:doi/10.1371/journal.pcbi.1002061

    Email: tom.ohara@gmail.com / rudy@wustl.edu
    Web: http://rudylab.wustl.edu

    The ORd model is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version. The ORd model is distributed in the hope that
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (www.gnu.org/licenses)
    """
# Initial values
membrane.V      = -87   # V=-87              1
sodium.Nai      = 7     # nai=7              2
sodium.Na_ss    = 7     # nass=nai           3
potassium.Ki    = 145   # ki=145             4
potassium.K_ss  = 145   # kss=ki             5
calcium.Cai     = 1e-4  # cai=1.0e-4         6
calcium.Ca_ss   = 1e-4  # cass=cai           7
calcium.Ca_nsr  = 1.2   # cansr=1.2          8
calcium.Ca_jsr  = 1.2   # cajsr=cansr        9
ina.m           = 0     # m=0               10
ina.hf          = 1     # hf=1              11
ina.hs          = 1     # hs=1              12
ina.j           = 1     # j=1               13
ina.hsp         = 1     # hsp=1             14
ina.jp          = 1     # jp=1              15
inal.m          = 0     # mL=0              16
inal.h          = 1     # hL=1              17
inal.hp         = 1     # hLp=1             18
ito.a           = 0     # a=0               19
ito.if          = 1     # iF=1              20
ito.is          = 1     # iS=1
ito.ap          = 0     # ap=0              22
ito.ifp         = 1     # iFp=1             23
ito.isp         = 1     # iSp=1
ical.d          = 0     # d=0               25
ical.ff         = 1     # ff=1              26
ical.fs         = 1     # fs=1
ical.fcaf       = 1     # fcaf=1            28
ical.fcas       = 1     # fcas=1
ical.jca        = 1     # jca=1             30
ical.nca        = 0     # nca=0
ical.ffp        = 1     # ffp=1             32
ical.fcafp      = 1     # fcafp=1           33
ikr.xf          = 0     # xrf=0
ikr.xs          = 0     # xrs=0             35
iks.x1          = 0     # xs1=0             36
iks.x2          = 0     # xs2=0
ik1.x           = 1     # xk1=1             38
ryr.Jrelnp      = 0     # Jrelnp=0
ryr.Jrelp       = 0     # Jrelp=0           40
camk.CaMK_trap  = 0     # CaMKt=0           41

#
# Simulator variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0 bind pace

#
# Membrane potential
# Page 5
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim)
    label membrane_potential
    in [mV]
i_ion = (
        + sodium.INa_tot
        + sodium.INa_ss_tot
        + calcium.ICa_tot
        + calcium.ICa_ss_tot
        + potassium.IK_tot
        + potassium.IK_ss_tot
        )
    label cellular_current
    in [A/F]

#
# Stimulus current
# Page 5
#
[stimulus]
i_stim = engine.pace * amplitude
    in [A/F]
amplitude = -80 [A/F]
    in [A/F]

#
# Cell geometry
# Page 6
#
[cell]
mode = 0
    desc: The type of cell. Endo = 0, Epi = 1, Mid = 2
L = 0.01 [cm] : Cell length
    in [cm]
r = 0.0011 [cm] :  Cell radius
    in [cm]
vcell = 1000 [uL/mL] * 3.14 * r * r * L
    in [uL]
    desc: Cell volume
Ageo = 2*3.14 * r * r + 2 * 3.14 * r * L
    in [cm^2]
    desc: Geometric cell area
Acap = 2 * Ageo
    in [cm^2]
    desc: Capacitative membrane area
AFC = Acap / phys.F * 1 [uF/cm^2]
    in [uF*mol/C]
vmyo = 0.68 * vcell
    in [uL]
    desc: Volume of the cytosolic compartment
vnsr = 0.0552 * vcell
    in [uL]
    desc: Volume of the NSR compartment
vjsr = 0.0048 * vcell
    in [uL]
    desc: Volume of the JSR compartment
vss = 0.02 * vcell
    in [uL]
    desc: Volume of the Submembrane space near the T-tubules

#
# Physical constants
# Page 2
#
[phys]
R = 8314 [J/kmol/K] : Gas constant
    in [J/kmol/K]
T = 310 [K] : Temperature
    in [K]
F = 96485 [C/mol] : Faraday's constant
    in [C/mol]
RTF = R * T / F
    in [mV]
FRT = F / (R * T)
    in [1/mV]
FFRT = F * FRT
    in [C/mol/mV]

#
# Extracellular concentrations
# Page 5
#
[extra]
Nao = 140 [mM] : Extracellular Na+ concentration
    in [mM]
Cao = 1.8 [mM] : Extracellular Ca2+ concentration
    in [mM]
Ko  = 5.4 [mM] : Extracellular K+ concentration
    in [mM]

#
# Reversal potentials
# Page 6
#
[nernst]
ENa = phys.RTF * log(extra.Nao / sodium.Nai)
    in [mV]
    desc: Reversal potential for Sodium currents
EK = phys.RTF * log(extra.Ko / potassium.Ki)
    in [mV]
    desc: Reversal potential for Potassium currents
PNaK = 0.01833
    desc: Permeability ratio K+ to Na+
EKs = phys.RTF * log((extra.Ko + PNaK * extra.Nao) / (potassium.Ki + PNaK * sodium.Nai))
    desc: Reversal potential for IKs
    in [mV]

#
# INa :: Fast Sodium current
# Page 6
#
# The fast sodium current is modelled using a Hodgkin-Huxley type formulation
# including activation (m), slow and fast components of inactivation (h) and
# recovery from inactivation (j). The slow component of inactivation and
# recovery from inactivation have an alternative formulation for CaMKII-
# phosphorylated channels.
#
[ina]
use membrane.V
tm  = 1 [ms] / (6.765 * exp((V + 11.64 [mV]) / 34.77 [mV]) + 8.552 * exp(-(V + 77.42 [mV]) / 5.955 [mV]))
    desc: Time constant for m-gate
    in [ms]
sm  = 1 / (1 + exp((V + 39.57 [mV]) / -9.871 [mV]))
    desc: Steady state value for m-gate
dot(m) = (sm - m) / tm
    desc: Activation gate for INa channels
sh  = 1 / (1 + exp((V + 82.90 [mV]) / 6.086 [mV]))
    desc: Steady-state value for h-gate
thf = 1 [ms] / (1.432e-5 * exp((V + 1.196 [mV]) / -6.285 [mV]) + 6.1490 * exp((V + 0.5096 [mV]) / 20.27 [mV]))
    desc: Time constant for fast development of inactivation in INa
    in [ms]
ths = 1 [ms] / (0.009794 * exp((V + 17.95 [mV]) / -28.05 [mV]) + 0.3343 * exp((V + 5.7300 [mV]) / 56.66 [mV]))
    desc: Time constant for slow development of inactivation in INa
    in [ms]
Ahf = 0.99 : Fraction of INa channels with fast inactivation
Ahs = 1.0 - Ahf : Fraction of INa channels with slow inactivation
dot(hf) = (sh - hf) / thf
    desc: Fast componennt of the inactivation gate for INa channels
dot(hs) = (sh - hs) / ths
    desc: Slow componennt of the inactivation gate for non-phosphorylated INa channels
h = Ahf * hf + Ahs * hs
    desc: Inactivation gate for INa
tj = 2.038 [ms] + 1 [ms] / (0.02136 * exp((V + 100.6 [mV]) / -8.281 [mV]) + 0.3052 * exp((V + 0.9941 [mV]) / 38.45 [mV]))
    desc: Time constant for j-gate in INa
    in [ms]
sj = sh
    desc: Steady-state value for j-gate in INa
dot(j) = (sj - j) / tj
    desc: Recovery from inactivation gate for non-phosphorylated INa channels
# Phosphorylated channels
thsp = 3 * ths
    desc: Time constant for h-gate of phosphorylated INa channels
    in [ms]
shsp = 1 / (1 + exp((V + 89.1 [mV]) / 6.086 [mV]))
    desc: Steady-state value for h-gate of phosphorylated INa channels
dot(hsp) = (shsp - hsp) / thsp
    desc: Slow componennt of the inactivation gate for phosphorylated INa channels
hp = Ahf * hf + Ahs * hsp
    desc: Inactivation gate for phosphorylated INa channels
tjp = 1.46 * tj
    desc: Time constant for the j-gate of phosphorylated INa channels
    in [ms]
dot(jp) = (sj - jp) / tjp
    desc: Recovery from inactivation gate for phosphorylated INa channels
# Current
GNa = 75 [mS/uF]: Maximum conductance of INa channels
    in [mS/uF]
INa = GNa * (V - nernst.ENa) * m^3 * ((1 - camk.f) * h * j + camk.f * hp * jp)
    in [A/F]
    desc: Fast sodium current

#
# INaL :: Late component of the Sodium current
# Page 7
#
[inal]
use membrane.V
use ina.tm
sm = 1 / (1 + exp((V + 42.85 [mV]) / -5.264 [mV]))
    desc: Steady state value of m-gate for INaL
dot(m) = (sm - m) / tm
    desc: Activation gate for INaL
th = 200.0 [ms] : Time constant for inactivation of non-phosphorylated INaL channels
    in [ms]
sh = 1 / (1 + exp((V + 87.61 [mV]) / 7.488 [mV]))
    desc: Steady-state value for inactivation of non-phosphorylated INaL channels
dot(h) = (sh - h) / th
    desc: Inactivation gate for non-phosphorylated INaL channels
thp = 3 * th
    in [ms]
    desc: Time constant for inactivation of phosphorylated INaL channels
shp = 1 / (1 + exp((V + 93.81 [mV]) / 7.488 [mV]))
    desc: Steady state value for inactivation of phosphorylated INaL channels
dot(hp) = (shp - hp) / thp
    desc: Inactivation gate for phosphorylated INaL channels
# Current
GNaL = 0.0075 [mS/uF] : Maximum conductance of INaL
    in [mS/uF]
f_gnal = if(cell.mode == 1, 0.6, 1)
    desc: Adjustment for different cell types
INaL = f_gnal * GNaL * (V - nernst.ENa) * m * ((1 - camk.f) * h + camk.f * hp)
    in [A/F]

#
# Ito :: Transient outward Potassium current
# page 8
#
[ito]
use membrane.V
ta = 1.0515 [ms] / (one + two)
    one = 1 / (1.2089 * (1 + exp((V - 18.4099 [mV]) / -29.3814 [mV])))
    two = 3.5 / (1 + exp((V + 100 [mV]) / 29.3814 [mV]))
    desc: Time constant for Ito activation
    in [ms]
sa = 1 / (1 + exp((V - 14.34 [mV]) / -14.82 [mV]))
    desc: Steady-state value for Ito activation
dot(a) = (sa - a) / ta
    desc: Ito activation gate
si = 1 / (1 + exp((V + 43.94 [mV]) / 5.711 [mV]))
    desc: Steady-state value for Ito inactivation
delta_epi = if(cell.mode == 1,
    1 - (0.95 / (1 + exp((V + 70 [mV]) / 5 [mV]))),
    1)
    desc: Adjustment for different cell types
tif = (4.562 [ms] + 1 [ms] / (0.3933 * exp((V + 100 [mV]) / -100 [mV]) + 0.08004 * exp((V + 50 [mV]) / 16.59 [mV]))) * delta_epi
    desc: Time constant for fast component of Ito inactivation
    in [ms]
tis = (23.62 [ms] + 1 [ms] / (0.001416 * exp((V + 96.52 [mV]) / -59.05 [mV]) + 1.780e-8 * exp((V + 114.1 [mV]) / 8.079 [mV]))) * delta_epi
    desc: Time constant for slow component of Ito inactivation
    in [ms]
dot(if) = (si - if) / tif
    desc: Fast component of Ito activation
dot(is) = (si - is) / tis
    desc: Slow component of Ito activation
Aif = 1 / (1 + exp((V - 213.6 [mV]) / 151.2 [mV]))
    desc: Fraction of fast inactivating Ito channels
Ais = 1 - Aif
    desc: Fraction of slow inactivating Ito channels
i = Aif * if + Ais * is
    desc: Inactivation gate for non-phosphorylated Ito
dot(ap) = (assp - ap) / ta
    assp = 1 / (1 + exp((-(V - 24.34 [mV])) / 14.82 [mV]))
dti_develop = 1.354 + 1e-4 / (exp((V - 167.4 [mV]) / 15.89 [mV]) + exp((V - 12.23 [mV]) / -0.2154 [mV]))
dti_recover = 1 - 0.5 / (1 + exp((V + 70 [mV]) / 20 [mV]))
tifp = dti_develop * dti_recover * tif
    desc: Time constant for fast component of inactivation of phosphorylated Ito channels
    in [ms]
tisp = dti_develop * dti_recover * tis
    desc: Time constant for slot component of inactivation of phosphorylated Ito channels
    in [ms]
dot(ifp) = (si - ifp) / tifp
    desc: Fast component of inactivation of phosphorylated Ito channels
dot(isp) = (si - isp) / tisp
    desc: Slow component of inactivation of phosphorylated Ito channels
ip = Aif * ifp + Ais * isp
    desc: Inactivation gate for phosphorylated Ito channels
# Current
Gto = if(cell.mode == 0, 0.02 [mS/uF], 0.08 [mS/uF])
    desc: Maximum conductance of Ito channels
    in [mS/uF]
Ito = Gto * (V - nernst.EK) * ((1 - camk.f) * a * i + camk.f * ap * ip)
    desc: Transient outward Potassium current
    in [A/F]

#
# ICaL  :: L-type Calcium current
# ICaNa :: Sodium current through the L-type Calcium channel
# ICaK  :: Potassium current through the L-type Calcium channel
# Page 9
#
# The ICaL channel is modeled using activation, inactivation (fast and slow),
# Ca-dependent inactivation (fast and slow) and recovery from Ca-dependent
# inactivation.
# Inactivation and Ca-dependent inactivation have an alternative formulation
# for CaMKII phosphorylated channels.
#
[ical]
use membrane.V
vf = V * phys.FRT
vff = V * phys.FFRT
    in [C/mol]
# Activation
sd = 1 / (1 + exp((V + 3.94 [mV]) / -4.23 [mV]))
    desc: Steady-state value for activation gate of ICaL channel
td = 0.6 [ms] + 1 [ms] / (exp(-0.05 [1/mV] * (V + 6 [mV])) + exp(0.09 [1/mV] * (V + 14 [mV])))
    desc: Time constant for activation gate of ICaL channel
    in [ms]
dot(d) = (sd - d) / td
    desc: Activation gate of ICaL channel
# Inactivation
sf = 1 / (1 + exp((V + 19.58 [mV]) / 3.696 [mV]))
    desc: Steady-state value for inactivation gate of ICaL channel
tff = 7 [ms] + 1 [ms] / (0.0045 * exp((V + 20 [mV]) / -10 [mV]) + 0.0045 * exp((V + 20 [mV]) / 10 [mV]))
    desc: Time constant for fast inactivation of ICaL channels
    in [ms]
tfs = 1000 [ms] + 1 [ms] / (0.000035 * exp((V + 5 [mV]) / -4 [mV]) + 0.000035 * exp((V + 5 [mV]) / 6 [mV]))
    desc: Time constant for fast inactivation of ICaL channels
    in [ms]
dot(ff) = (sf - ff) / tff
    desc: Fast inactivation of ICaL channels
dot(fs) = (sf - fs) / tfs
    desc: Slow inactivation of ICaL channels
Aff = 0.6 : Fraction of ICaL channels with fast inactivation
Afs = 1 - Aff : Fraction of ICaL channels with slow inactivation
f = Aff * ff + Afs * fs
    desc: Inactivation of ICaL channels
# Ca-dependent inactivation
sfca = sf
    desc: Steady-state value for Ca-dependent inactivation of ICaL channels
tfcaf = 7 [ms] + 1 [ms] / (0.04 * exp((V - 4 [mV]) / -7 [mV]) + 0.04 * exp((V - 4 [mV]) / 7 [mV]))
    desc: Time constant for fast Ca-dependent inactivation of ICaL channels
    in [ms]
tfcas = 100 [ms] + 1 [ms] / (0.00012 * exp(V / -3 [mV]) + 0.00012 * exp(V / 7 [mV]))
    desc: Time constant for slow Ca-dependent inactivation of ICaL channels
    in [ms]
Afcaf = 0.3 + 0.6 / (1 + exp((V - 10 [mV]) / 10 [mV]))
    desc: Fraction of ICaL channels with fast Ca-dependent inactivation
Afcas = 1 - Afcaf
    desc: Fraction of ICaL channels with slow Ca-dependent inactivation
dot(fcaf) = (sfca - fcaf) / tfcaf
    desc: Fast Ca-dependent inactivation of ICaL channels
dot(fcas) = (sfca - fcas) / tfcas
    desc: Slow Ca-dependent inactivation of ICaL channels
fca = Afcaf * fcaf + Afcas * fcas
    desc: Ca-dependent inactivation of ICaL channels
# Recovery from Ca-dependent inactivation
tjca = 75 [ms] : Time constant of recovery from Ca-dependent inactivation
    in [ms]
dot(jca) = (sfca - jca) / tjca
    desc: Recovery from Ca-dependent inactivation
# Inactivation of phosphorylated channels
tffp = 2.5 * tff
    in [ms]
    desc: Time constant for fast inactivation of phosphorylated ICaL channels
dot(ffp) = (sf - ffp) / tffp
    desc: Fast inactivation of phosphorylated ICaL channels
fp = Aff * ffp + Afs * fs
    desc: Inactivation of phosphorylated ICaL channels
# Ca-dependent inactivation of phosphorylated channels
tfcafp = 2.5 * tfcaf
    in [ms]
    desc: Time constant for fast Ca-dependent inactivation of phosphorylated ICaL channels
dot(fcafp) = (sfca - fcafp) / tfcafp
    desc: Fast Ca-dependent inactivation of phosphorylated ICaL channels
fcap = Afcaf * fcafp + Afcas * fcas
    desc: Ca-dependent inactivation of phosphorylated ICaL channels
# Fraction of channels in Ca-depdent inactivation mode
dot(nca) = anca * k2n - nca*km2n
    desc: Fraction of channels in Ca-depdent inactivation mode
    Kmn = 0.002 [mM]
        in [mM]
    k2n = 1000 [1/ms]
        in [1/ms]
    km2n = jca * 1 [1/ms]
        in [1/ms]
    anca = 1 / (k2n / km2n + (1 + Kmn / calcium.Ca_ss)^4)
# Total currents through ICaL channel
PhiCaL  = if(vf == 0, 1 [C/mol] * 4 * (calcium.Ca_ss - 0.341 * extra.Cao), 4 * vff * (       calcium.Ca_ss  * exp(2 * vf) - 0.341 * extra.Cao) / (exp(2 * vf) - 1))
    in [mC/L]
PhiCaNa = if(vf == 0, 1 [C/mol] * 1 * (0.75 * sodium.Na_ss - 0.75 * extra.Nao),  1 * vff * (0.75 * sodium.Na_ss   * exp(1 * vf) - 0.75  * extra.Nao) / (exp(1 * vf) - 1))
    in [mC/L]
PhiCaK  = if(vf == 0, 1 [C/mol] * 1 * (0.75 * potassium.K_ss - 0.75 * extra.Ko), 1 * vff * (0.75 * potassium.K_ss * exp(1 * vf) - 0.75  * extra.Ko ) / (exp(1 * vf) - 1))
    in [mC/L]
PCa = piecewise(cell.mode == 0, base, cell.mode == 1, 1.2*base, 2.5*base)
    base = 0.0001 [L/ms/F]
        in [L/ms/F]
    in [L/ms/F]
PCap = 1.1      * PCa
    in [L/ms/F]
PCaNa = 0.00125  * PCa
    in [L/ms/F]
PCaK = 3.574e-4 * PCa
    in [L/ms/F]
PCaNap = 0.00125  * PCap
    in [L/ms/F]
PCaKp = 3.574e-4 * PCap
    in [L/ms/F]
g  = d * (f  * (1 - nca) + jca * fca  * nca)
    desc: Conductivity of non-phosphorylated ICaL channels
gp = d * (fp * (1 - nca) + jca * fcap * nca)
    desc: Conductivity of phosphorylated ICaL channels
ICaL  = (1 - camk.f) * PCa   * PhiCaL  * g + camk.f * PCap   * PhiCaL  * gp
    desc: L-type Calcium current
    in [A/F]
ICaNa = (1 - camk.f) * PCaNa * PhiCaNa * g + camk.f * PCaNap * PhiCaNa * gp
    desc: Sodium current through ICaL channels
    in [A/F]
ICaK  = (1 - camk.f) * PCaK  * PhiCaK  * g + camk.f * PCaKp  * PhiCaK  * gp
    desc: Potassium current through ICaL channels
    in [A/F]


#
# IKr :: Rapid delayed rectifier Potassium current
# Page 11
#
# Modelled with activation (fast and slow) and an instantaneous inactivation.
#
[ikr]
use membrane.V
# Activation
sx = 1 / (1 + exp((V + 8.337 [mV]) / -6.789 [mV]))
    desc: Steady-state value for IKr activation
txf = 12.98 [ms] + 1 [ms] / (0.36520 * exp((V - 31.66 [mV]) / 3.869 [mV]) + 4.123e-5 * exp((V - 47.78 [mV]) / -20.38 [mV]))
    desc: Time constant for fast IKr activation
    in [ms]
txs = 1.865 [ms] + 1 [ms] / (0.06629 * exp((V - 34.70 [mV]) / 7.355 [mV]) + 1.128e-5 * exp((V - 29.74 [mV]) / -25.94 [mV]))
    desc: Time constant for slow IKr activation
    in [ms]
dot(xf) = (sx - xf) / txf
    desc: Fast activation of IKr channels
dot(xs) = (sx - xs) / txs
    desc: Slow activation of IKr channels
Axf = 1 / (1 + exp((V + 54.81 [mV]) / 38.21 [mV]))
    desc: Fraction of IKr channels with fast activation
Axs = 1 - Axf
    desc: Fraction of IKr channels with slow activation
x = Axf * xf + Axs * xs
    desc: Activation of IKr channels
# Inactivation
r = 1 / (1 + exp((V + 55 [mV]) / 75 [mV])) * 1 / (1 + exp((V - 10 [mV]) / 30 [mV]))
    desc: Inactivation of IKr channels
# Current
GKr = piecewise(cell.mode == 0, base, cell.mode == 1, 1.3 * base, 0.8 * base)
    desc: Maximum conductance of IKr channels
    in [mS/uF]
    base = 0.046 [mS/uF]
        in [mS/uF]
IKr = GKr * sqrt(extra.Ko / 5.4 [mM]) * x * r * (V - nernst.EK)
    desc: Rapid delayed Potassium current
    in [A/F]

#
# IKs :: Slow delayed rectifier Potassium current
# Page 11
#
# Modelled with two activation channels
#
[iks]
use membrane.V
sx  = 1 / (1 + exp((V + 11.6 [mV]) / -8.932 [mV]))
    desc: Steady-state value for activation of IKs channels
tx1 = 817.3 [ms] + 1 [ms] / (2.326e-4 * exp((V + 48.28 [mV]) / 17.8 [mV]) + 0.001292 * exp((V + 210 [mV]) / -230 [mV]))
    desc: Time constant for slow, low voltage IKs activation
    in [ms]
dot(x1) = (sx - x1) / tx1
    desc: Slow, low voltage IKs activation
tx2 = 1 [ms] / (0.01 * exp((V - 50 [mV]) / 20 [mV]) + 0.0193 * exp((V + 66.54 [mV]) / -31 [mV]))
    desc: Time constant for fast, high voltage IKs activation
    in [ms]
dot(x2) = (sx - x2) / tx2
    desc: Fast, high voltage IKs activation
KsCa = 1 + 0.6 / (1 + (3.8e-5 [mM] / calcium.Cai)^1.4)
GKs = if(cell.mode == 1, 1.4 * base, base)
    desc: Maximum conductance for IKs
    in [mS/uF]
    base = 0.0034 [mS/uF]
        in [mS/uF]
IKs = GKs * KsCa * x1 * x2 * (V - nernst.EKs)
    desc: Slow delayed rectifier Potassium current
    in [A/F]

#
# IK1 :: Inward rectifier Potassium current
# Page 12
#
# Modelled with an activation channel and an instantaneous inactivation channel
#
[ik1]
use membrane.V
dot(x) = (inf - x) / tau
    desc: Activation of IK1 channels
    inf = 1 / (1 + exp(-(V + 2.5538 [mV/mM] * extra.Ko + 144.59 [mV]) / (1.5692 [mV/mM] * extra.Ko + 3.8115 [mV])))
        desc: Steady-state value for activation of IK1 channels
    tau = 122.2 [ms] / (exp((V + 127.2 [mV]) / -20.36 [mV]) + exp((V + 236.8 [mV]) / 69.33 [mV]))
        desc: Time constant for activation of IK1 channels
        in [ms]
r = 1 / (1 + exp((V + 105.8 [mV] - 2.6 [mV/mM] * extra.Ko) / 9.493 [mV]))
    desc: Inactivation of IK1 channels
GK1 = base * piecewise(cell.mode == 0, 1, cell.mode == 1, 1.2, 1.3)
    desc: Conductivity of IK1 channels, cell-type dependent
    in [mS/uF]
    base = 0.1908 [mS/uF]
        in [mS/uF]
IK1 = GK1 * sqrt(extra.Ko * 1 [1/mM]) * r * x * (V - nernst.EK)
    desc: Inward rectifier Potassium current
    in [A/F]

#
# INaCa :: Sodium/Calcium exchange current
# page 12
#
[inaca]
use membrane.V
use extra.Nao, extra.Cao
use sodium.Nai, calcium.Cai
kna1 = 15 [mM]
    in [mM]
kna2 = 5 [mM]
    in [mM]
kna3 = 88.12 [mM]
    in [mM]
kasymm = 12.5
wna = 6e4 [Hz]
    in [Hz]
wca = 6e4 [Hz]
    in [Hz]
wnaca = 5e3 [Hz]
    in [Hz]
kcaon = 1.5e6 [mM/ms]
    in [mM/ms]
kcaoff = 5e3 [mM/ms]
    in [mM/ms]
qna = 0.5224
qca = 0.167
hca = exp(qca * V * phys.FRT)
hna = exp(qna * V * phys.FRT)
# Parameters h
h1  = 1 + Nai / kna3 * (1 + hna)
h2  = (Nai * hna) / (kna3 * h1)
h3  = 1 / h1
h4  = 1 + Nai / kna1 * (1 + Nai / kna2)
h5  = Nai * Nai / (h4 * kna1 * kna2)
h6  = 1 / h4
h7  = 1 + Nao / kna3 * (1 + 1 / hna)
h8  = Nao / (kna3 * hna * h7)
h9  = 1 / h7
h10 = kasymm + 1 + Nao / kna1 * (1 + Nao / kna2)
h11 = Nao * Nao / (h10 * kna1 * kna2)
h12 = 1 / h10
# Parameters k
k1 = h12 * Cao * kcaon * 1 [1/M/mM]
    in [Hz]
k2 = kcaoff * 1 [1/M]
    in [Hz]
k5 = kcaoff * 1 [1/M]
    in [Hz]
k6 = h6 * Cai * kcaon * 1 [1/M/mM]
    in [Hz]
k7 = h5 * h2 * wna
    in [Hz]
k8 = h8 * h11 * wna
    in [Hz]
k3p = h9 * wca
    in [Hz]
k3pp = h8 * wnaca
    in [Hz]
k3 = k3p + k3pp
    in [Hz]
k4p = h3 * wca / hca
    in [Hz]
k4pp = h2 * wnaca
    in [Hz]
k4 = k4p + k4pp
    in [Hz]
x1 = k2 * k4 * (k7 + k6) + k5 * k7 * (k2 + k3)
    in [Hz^3]
x2 = k1 * k7 * (k4 + k5) + k4 * k6 * (k1 + k8)
    in [Hz^3]
x3 = k1 * k3 * (k7 + k6) + k8 * k6 * (k2 + k3)
    in [Hz^3]
x4 = k2 * k8 * (k4 + k5) + k3 * k5 * (k1 + k8)
    in [Hz^3]
E1 = x1 / (x1 + x2 + x3 + x4)
E2 = x2 / (x1 + x2 + x3 + x4)
E3 = x3 / (x1 + x2 + x3 + x4)
E4 = x4 / (x1 + x2 + x3 + x4)
KmCaAct = 150e-6 [mM]
    in [mM]
allo = 1 / (1 + (KmCaAct / Cai)^2)
JncxNa = 3 * (E4 * k7 - E1 * k8) + E3 * k4pp - E2 * k3pp
    in [1/s]
JncxCa = E2 * k2 - E1 * k1
    in [1/s]
Gncx = piecewise(cell.mode == 0, base, cell.mode == 1, 1.1*base, 1.4*base)
    in [C/F]
    base = 0.0008 [C/F]
        in [C/F]
INaCa = 0.8 * Gncx * allo * (JncxNa + 2 * JncxCa)
    desc: Sodium/Calcium exchange current
    in [A/F]

#
# INaCa_ss :: Sodium/Calcium exchanger current into the L-type subspace
# Page 12
#
[inacass]
use membrane.V
use extra.Nao, extra.Cao
use sodium.Na_ss, calcium.Ca_ss
h1  = 1 + Na_ss / inaca.kna3 * (1 + inaca.hna)
h2  = (Na_ss * inaca.hna)/(inaca.kna3 * h1)
h3  = 1 / h1
h4  = 1 + Na_ss / inaca.kna1 * (1 + Na_ss / inaca.kna2)
h5  = Na_ss * Na_ss /(h4 * inaca.kna1 * inaca.kna2)
h6  = 1 / h4
h7  = 1 + Nao / inaca.kna3 * (1 + 1 / inaca.hna)
h8  = Nao / (inaca.kna3 * inaca.hna * h7)
h9  = 1/h7
h10 = inaca.kasymm + 1 + Nao / inaca.kna1 * (1 + Nao / inaca.kna2)
h11 = Nao * Nao / (h10 * inaca.kna1 * inaca.kna2)
h12 = 1/h10
k1 = h12 * Cao * inaca.kcaon * 1 [1/M/mM]
    in [Hz]
k2 = inaca.kcaoff * 1 [1/M]
    in [Hz]
k3p = h9 * inaca.wca
    in [Hz]
k3pp = h8 * inaca.wnaca
    in [Hz]
k3 = k3p + k3pp
    in [Hz]
k4p = h3 * inaca.wca / inaca.hca
    in [Hz]
k4pp = h2 * inaca.wnaca
    in [Hz]
k4 = k4p + k4pp
    in [Hz]
k5 = inaca.kcaoff * 1 [1/M]
    in [Hz]
k6 = h6 * Ca_ss * inaca.kcaon * 1 [1/M/mM]
    in [Hz]
k7 = h5 * h2 * inaca.wna
    in [Hz]
k8 = h8 * h11 * inaca.wna
    in [Hz]
x1 = k2 * k4 * (k7 + k6) + k5 * k7 * (k2 + k3)
    in [Hz^3]
x2 = k1 * k7 * (k4 + k5) + k4 * k6 * (k1 + k8)
    in [Hz^3]
x3 = k1 * k3 * (k7 + k6) + k8 * k6 * (k2 + k3)
    in [Hz^3]
x4 = k2 * k8 * (k4 + k5) + k3 * k5 * (k1 + k8)
    in [Hz^3]
E1 = x1 / (x1 + x2 + x3 + x4)
E2 = x2 / (x1 + x2 + x3 + x4)
E3 = x3 / (x1 + x2 + x3 + x4)
E4 = x4 / (x1 + x2 + x3 + x4)
KmCaAct = 150e-6 [mM]
    in [mM]
allo    = 1 / (1 + (KmCaAct / Ca_ss)^2)
JncxNa  = 3 * (E4 * k7 - E1 * k8) + E3 * k4pp - E2 * k3pp
    in [1/s]
JncxCa  = E2 * k2 - E1 * k1
    in [1/s]
INaCa_ss = 0.2 * inaca.Gncx * allo * (JncxNa + 2 * JncxCa)
    desc: Sodium/Calcium exchange current into the T-Tubule subspace
    in [A/F]

#
# INaK :: Sodium/Potassium ATPase current
# Based on Smith and Crampin, 2004, PMBM
# Page 14
#
[inak]
use membrane.V
use extra.Nao, sodium.Nai, sodium.Na_ss
use extra.Ko, potassium.Ki, potassium.K_ss
k1p = 949.5 [1/s]
    in [1/s]
k1m = 182.4 [1/s/mM]
    in [1/s/mM]
k2p = 687.2 [1/s]
    in [1/s]
k2m = 39.4 [1/s]
    in [1/s]
k3p = 1899 [1/s]
    in [1/s]
k3m = 79300 [1/s/mM^2]
    in [1/s/mM^2]
k4p = 639 [1/s]
    in [1/s]
k4m = 40 [1/s]
    in [1/s]
Knai0 = 9.073 [mM]
    in [mM]
Knao0 = 27.78 [mM]
    in [mM]
Kki = 0.5 [mM]
    in [mM]
Kko = 0.3582 [mM]
    in [mM]
delta = -0.1550
MgADP = 0.05 [mM]
    in [mM]
MgATP = 9.8 [mM]
    in [mM]
Kmgatp = 1.698e-7 [mM]
    in [mM]
H = 1.0e-7 [mM]
    in [mM]
eP = 4.2 [mM]
    in [mM]
Khp = 1.698e-7 [mM]
    in [mM]
Knap = 224 [mM]
    in [mM]
Kxkur = 292 [mM]
    in [mM]
P = eP / (1 + H / Khp + Nai / Knap + Ki / Kxkur)
    in [mM]
Knai = Knai0 * exp(delta * V * phys.FRT / 3)
    in [mM]
Knao = Knao0 * exp((1 - delta) * V * phys.FRT / 3)
    in [mM]
a1 = (k1p * (Nai / Knai)^3) / ((1 + Nai / Knai)^3 + (1 + Ki / Kki)^2 - 1)
    in [Hz]
b1 = k1m * MgADP
    in [Hz]
a2 = k2p
    in [Hz]
b2 = (k2m * (Nao / Knao)^3) / ((1 + Nao / Knao)^3 + (1 + Ko / Kko)^2 - 1)
    in [Hz]
a3 = (k3p * (Ko / Kko)^2  ) / ((1 + Nao / Knao)^3 + (1 + Ko / Kko)^2 - 1)
    in [Hz]
b3 = (k3m * P * H) / (1 + MgATP / Kmgatp)
    in [Hz]
a4 = (k4p * MgATP / Kmgatp) / (1 + MgATP / Kmgatp)
    in [Hz]
b4 = (k4m * (Ki / Kki)^2) / ((1 + Nai / Knai)^3 + (1 + Ki / Kki)^2 - 1)
    in [Hz]
x1 = a4 * a1 * a2 + b2 * b4 * b3 + a2 * b4 * b3 + b3 * a1 * a2
    in [Hz^3]
x2 = b2 * b1 * b4 + a1 * a2 * a3 + a3 * b1 * b4 + a2 * a3 * b4
    in [Hz^3]
x3 = a2 * a3 * a4 + b3 * b2 * b1 + b2 * b1 * a4 + a3 * a4 * b1
    in [Hz^3]
x4 = b4 * b3 * b2 + a3 * a4 * a1 + b2 * a4 * a1 + b3 * b2 * a1
    in [Hz^3]
E1 = x1 / (x1 + x2 + x3 + x4)
E2 = x2 / (x1 + x2 + x3 + x4)
E3 = x3 / (x1 + x2 + x3 + x4)
E4 = x4 / (x1 + x2 + x3 + x4)
JnakNa = 3 * (E1 * a3 - E2 * b3)
    in [1/s]
JnakK  = 2 * (E4 * b1 - E3 * a1)
    in [1/s]
Pnak = piecewise(cell.mode == 0, base, cell.mode == 1, 0.9 * base, 0.7 * base)
    in [C/F]
    base = 30 [C/F]
        in [C/F]
INaK = Pnak * (JnakNa + JnakK)
    desc: Sodium/Potassium ATPase current
    in [A/F]

#
# IKb :: Background Potassium current
# Page 15
#
[ikb]
use membrane.V
xkb = 1 / (1 + exp((V - 14.48 [mV]) / -18.34 [mV]))
GKb = if(cell.mode == 1, 0.0018 [mS/uF], 0.003 [mS/uF])
    in [mS/uF]
IKb = GKb * xkb * (V - nernst.EK)
    desc: Background Potassium current
    in [A/F]

#
# INab :: Background Sodium current
# Page 15
#
[inab]
use membrane.V
PNab = 3.75e-10 [L/ms/F]
    in [L/ms/F]
INab = PNab * V * phys.FFRT * (sodium.Nai * evf - extra.Nao) / (evf - 1)
    evf = exp(V * phys.FRT)
    desc: Background Sodium current
    in [A/F]

#
# ICab :: Background Calcium current
# Page 15
#
[icab]
use membrane.V
PCab = 2.5e-8 [L/ms/F]
    in [L/ms/F]
ICab = PCab * 4 * V * phys.FFRT * (calcium.Cai * evf2 - 0.341 * extra.Cao) / (evf2 - 1)
    evf2 = exp(2 * V * phys.FRT)
    desc: Background Calcium current
    in [A/F]

#
# IpCa :: Sarcolemmal Calcium pump current
# Page 15
#
[ipca]
use membrane.V
GpCa = 0.0005 [A/F]
    in [A/F]
IpCa = GpCa * calcium.Cai / (0.0005 [mM] + calcium.Cai)
    desc: Sarcolemmal Calcium pump current
    in [A/F]

#
# Jrel :: SR Calcium release flux via Ryanodine receptor
# Page 17
#
[ryr]
use calcium.Ca_jsr
bt = 4.75 [ms]
    in [ms]
a_rel = 0.5 * bt
    in [ms]
dot(Jrelnp) = (inf - Jrelnp) / tau
    in [mM/ms]
    tau = if(value < 0.001 [ms], 0.001 [ms], value)
        in [ms]
        value = bt / (1 + 0.0123 [mM] / Ca_jsr)
            in [ms]
    inf = if(cell.mode == 2, 1.7 * base, base)
        in [mM/ms]
        base = -1 [mM/ms/mV] * a_rel * ical.ICaL / (1 + (1.5 [mM] / Ca_jsr)^8)
            in [mM/ms]
btp = 1.25 * bt
    in [ms]
a_relp = 0.5 * btp
    in [ms]
dot(Jrelp) = (inf - Jrelp) / tau
    in [mM/ms]
    tau = if(value < 0.001 [ms], 0.001 [ms], value)
        in [ms]
        value = btp / (1 + 0.0123 [mM] / Ca_jsr)
            in [ms]
    inf = if(cell.mode == 2, 1.7*base, base)
        in [mM/ms]
        base = -1 [mM/ms/mV] * a_relp * ical.ICaL / (1 + (1.5 [mM] / Ca_jsr)^8)
            in [mM/ms]
Jrel = (1 - camk.f) * Jrelnp + camk.f * Jrelp
    desc: SR Calcium release flux via Ryanodine receptor
    in [mM/ms]

#
# Jup :: Calcium uptake via SERCA pump
# Page 17
#
[serca]
use calcium.Cai, calcium.Ca_jsr, calcium.Ca_nsr
f = if(cell.mode == 1, 1.3, 1)
Jupnp = f * (0.004375 [mM/ms] * Cai / (Cai + 0.00092 [mM]))
    in [mM/ms]
Jupp  = f * (2.75 * 0.004375 [mM/ms] * Cai / (Cai + 0.00092 [mM] - 0.00017 [mM]))
    in [mM/ms]
Jleak = 0.0039375 [mM/ms] * Ca_nsr / 15 [mM]
    in [mM/ms]
Jup = (1 - camk.f) * Jupnp + camk.f * Jupp - Jleak
    desc: Total Ca2+ uptake, via SERCA pump, from myoplasm to nsr
    in [mM/ms]
Jtr = (Ca_nsr - Ca_jsr) / 100 [ms]
    desc: Ca2+ translocation from nsr to jsr
    in [mM/ms]

#
# Diffusion fluxes
# Page 16
#
[diff]
JdiffNa = (sodium.Na_ss - sodium.Nai) / 2 [ms]
    in [mM/ms]
JdiffK = (potassium.K_ss  - potassium.Ki)  / 2 [ms]
    in [mM/ms]
Jdiff = (calcium.Ca_ss - calcium.Cai) / 0.2 [ms]
    in [mM/ms]

#
# Intracellular Sodium concentrations
# Page 18
#
[sodium]
use cell.AFC, cell.vss, cell.vmyo
INa_tot = ina.INa + inal.INaL + inab.INab + 3*inaca.INaCa + 3*inak.INaK
    in [A/F]
dot(Nai) = -INa_tot * AFC / vmyo + diff.JdiffNa * vss / vmyo
    desc: Intracellular Potassium concentration
    in [mM]
INa_ss_tot = ical.ICaNa + 3*inacass.INaCa_ss
    in [A/F]
dot(Na_ss) = -INa_ss_tot * AFC / vss - diff.JdiffNa
    in [mM]

#
# Intracellular potassium concentrations
# Page 18
#
[potassium]
use cell.AFC, cell.vss, cell.vmyo
IK_tot = (
    + ito.Ito
    + ikr.IKr
    + iks.IKs
    + ik1.IK1
    + ikb.IKb
    - 2 * inak.INaK
)
    in [A/F]
IK_ss_tot = ical.ICaK
    in [A/F]
dot(Ki) = -(IK_tot + stimulus.i_stim) * AFC / vmyo + diff.JdiffK * vss / vmyo
    desc: Intracellular Potassium concentration
    in [mM]
dot(K_ss) = -IK_ss_tot * AFC / vss - diff.JdiffK
    desc: Potassium concentration in the T-Tubule subspace
    in [mM]

#
# Intracellular Calcium concentrations and buffers
# Page 18
#
[calcium]
use cell.AFC, cell.vmyo, cell.vnsr, cell.vjsr, cell.vss
cmdnmax = if(cell.mode == 1, 1.3*base, base)
    in [mM]
    base = 0.05 [mM]
        in [mM]
trpnmax = 0.07 [mM]
    in [mM]
BSRmax  = 0.047 [mM]
    in [mM]
BSLmax  = 1.124 [mM]
    in [mM]
csqnmax = 10 [mM]
    in [mM]
kmcmdn = 0.00238 [mM]
    in [mM]
kmtrpn = 0.0005 [mM]
    in [mM]
KmBSR = 0.00087 [mM]
    in [mM]
KmBSL = 0.0087 [mM]
    in [mM]
kmcsqn = 0.8 [mM]
    in [mM]
ICa_tot = ipca.IpCa + icab.ICab - 2*inaca.INaCa
    in [A/F]
dot(Cai)  = buff * (-ICa_tot * AFC / (2*vmyo) - serca.Jup  * vnsr / vmyo + diff.Jdiff * vss / vmyo )
    desc: Intracellular Calcium concentratium
    in [mM]
    buff = 1 / (1 + cmdnmax * kmcmdn / (a*a) + trpnmax * kmtrpn / (b*b))
    a = kmcmdn + calcium.Cai
        in [mM]
    b = kmtrpn + calcium.Cai
        in [mM]
ICa_ss_tot = ical.ICaL - 2 * inacass.INaCa_ss
    in [A/F]
dot(Ca_ss) = buff * (-ICa_ss_tot * AFC / (2*vss) + ryr.Jrel * vjsr / vss - diff.Jdiff )
    desc: Calcium concentratium in the T-Tubule subspace
    in [mM]
    buff = 1 / (1 + BSRmax * KmBSR / a^2 + BSLmax * KmBSL / b^2)
    a = KmBSR + calcium.Ca_ss
        in [mM]
    b = KmBSL + calcium.Ca_ss
        in [mM]
dot(Ca_jsr) = buff * (serca.Jtr - ryr.Jrel)
    desc: Calcium concentration in the JSR subspace
    in [mM]
    buff = 1 / (1 + csqnmax * kmcsqn / a^2)
    a = kmcsqn + calcium.Ca_jsr
        in [mM]
dot(Ca_nsr) = serca.Jup - serca.Jtr * vjsr / vnsr
    desc: Calcium concentration in the NSR subspace
    in [mM]

#
# CaMKII signalling
# Page 16
#
[camk]
aCaMK = 0.05 [1/ms]
    in [1/ms]
bCaMK = 0.00068 [1/ms]
    in [1/ms]
CaMKo = 0.05
KmCaM = 0.0015 [mM]
    in [mM]
CaMK_bound = CaMKo * (1 - CaMK_trap) / (1 + KmCaM / calcium.Ca_ss)
CaMK_active = CaMK_bound + CaMK_trap
dot(CaMK_trap) = aCaMK * CaMK_bound * CaMK_active - bCaMK * CaMK_trap
KmCaMK = 0.15
f = 1 / (1 + KmCaMK / CaMK_active)
    desc: Fraction of phosphorylated channels

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        10       0.5      1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get the model and protocol, create a simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Create an empty figure
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')

# Select variables for logging
variables = [
    'engine.time',
    'membrane.V',
]

# Run a simulation in every mode
modes = {
    'Endocardial' : 0,
    'Epicardial' : 1,
    'Mid-myocardial' : 2,
}
for name, mode in modes.items():

    # Change mode in simulation
    s.set_constant('cell.mode', mode)

    # Pre-pace for a few beats
    s.pre(50 * 1000)

    # Run a logged simulation
    d = s.run(500, log=variables)

    # Display the simulated membrane potential
    plt.plot(d['engine.time'], d['membrane.V'], label=name)

    # Reset the simulation
    s.reset()

plt.legend(loc='upper right')
plt.show()

